@page "/SupplyCategory"
@inject HttpClient http
@using System.Text.Json

<h2 class="text-center">Categoria de insumos</h2>

<div class="mb-2 row container col-md-auto">
    <div>
        <AddButton Icon="fas fa-plus" Name="" Url="SupplyCategory/Create" TabIndex="1" />
    </div>
    <div class="form-inline col-md-10">
        <label class="sr-only" for="filter-name">Filtro</label>
        <input type="text" name="filter-name" class="form-control mb-2 mr-sm-2 col-md-9"
               @bind="@FilterName" placeholder="Filtrar Pelo nome" tabindex="2" @onkeyup="@(e => FilterKeyPress(e))"/>
        <EditButton Name="" OnClick="@Filter" Css="mr-sm-2 mb-2" Icon="fas fa-search" TabIndex="3" />
        <DeleteButton Name="" OnClick="FilterClean" Css="mb-2" Icon="fas fa-eraser" TabIndex="4" />
    </div>
</div>

@if (SupplyCategories == null)
{
    <Loading/>
}
else if (SupplyCategories.Count == 0)
{
    <p><em>Não existe categorias de insumos cadastradas!</em></p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Categoria</th>
                <th>Descrição</th>
                <th class="text-center">Ação</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var supplyCategory in SupplyCategories)
            {
                <tr>
                    <td>@supplyCategory.Name</td>
                    <td>@supplyCategory.Description</td>
                    <td class="text-center">
                        <EditButton Icon="fas fa-edit" Name=""
                                    Url="@("/SupplyCategory/Edit/" + supplyCategory.Id)" Css="ml-2"/>
                        <DeleteButton Icon="fas fa-trash-alt" Name=""
                                      OnClick="@(() => DeleteSupplyCategory(supplyCategory.Id))" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <footer class="page-footer fixed-bottom">
        <Pagination TotalAmountPages="@TotalAmountPages" CurrentPage="@CurrentPage" Range="3" SelectedPage="@SelectedPage" />
    </footer>
}

<ConfirmationForm @ref="Confirmation" OnCancel="@CancelConfirm" OnConfirmation="@DeleteConfirm">
    <div>Deseja realmente excluir este item ?</div>
</ConfirmationForm>


@code {
    List<SupplyCategory> SupplyCategories { get; set; }
    ConfirmationForm Confirmation;
    int SupplyCategoryId;
    public int TotalAmountPages { get; set; }
    public int CurrentPage { get; set; }
    public int TotalAmountItems { get; set; }
    public string FilterName { get; set; } = string.Empty;

    private async Task Filter()
    {
        CurrentPage = 1;
        await LoadSupplyCategories();
    }

    private async Task FilterClean()
    {
        FilterName = string.Empty;
        CurrentPage = 1;
        await LoadSupplyCategories();
    }

    private async Task SelectedPage(int page)
    {
        CurrentPage = page;
        await LoadSupplyCategories(page);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSupplyCategories();
    }

    async Task LoadSupplyCategories(int page = 1, int amountPerPage = 5)
    {

        if (page <= 0)
        {
            page = 1;
        }

        var httpResponse = await http.GetAsync($"/api/supplyCategory/Get?page={page}&amountPerPage={amountPerPage}&name={FilterName}");

        if (httpResponse.IsSuccessStatusCode)
        {
            TotalAmountPages = int.Parse(httpResponse.Headers.GetValues("totalPages").FirstOrDefault());
            TotalAmountItems = int.Parse(httpResponse.Headers.GetValues("totalAmount").FirstOrDefault());

            if (TotalAmountItems == 0)
            {
                SupplyCategories = new List<SupplyCategory>();
            }
            else
            {
                if (TotalAmountPages < CurrentPage)
                {
                    httpResponse = await http.GetAsync($"/api/supplyCategory/Get?page={page - 1}&amountPerPage={amountPerPage}");
                    TotalAmountPages = int.Parse(httpResponse.Headers.GetValues("totalPages").FirstOrDefault());
                }

                var responseString = await httpResponse.Content.ReadAsStringAsync();

                SupplyCategories = JsonSerializer.Deserialize<List<SupplyCategory>>(responseString, new JsonSerializerOptions()
                {
                    PropertyNameCaseInsensitive = true
                });
            }
        }
    }

    void DeleteSupplyCategory(int id)
    {
        Confirmation.Display();
        SupplyCategoryId = id;
    }

    async Task DeleteConfirm()
    {
        await http.DeleteAsync($"/api/SupplyCategory/Delete/{SupplyCategoryId}");
        Confirmation.Hide();
        await SelectedPage(CurrentPage);
    }

    private void CancelConfirm()
    {
        Confirmation.Hide();
        SupplyCategoryId = 0;
    }

    private async Task FilterKeyPress(KeyboardEventArgs e)
    {
        if (ConsoleKey.Enter.ToString() == e.Key)
        {
            await Filter();
        }
    }

}