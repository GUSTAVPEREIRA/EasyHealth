@page "/SupplyCategory"
@inject HttpClient http
@using System.Text.Json

<h3>Categoria de insumos</h3>

<div>
    <a class="btn btn-success text-white mb-2" href="SupplyCategory/Create">Adicionar</a>
</div>

@if (SupplyCategories == null)
{
    <p><em>Carregando...</em></p>
}
else if (SupplyCategories.Count == 0)
{
    <p><em>Não existe categorias de insumos cadastradas!</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Categoria</th>
                <th>Descrição</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var supplyCategory in SupplyCategories)
            {
                <tr>
                    <td>@supplyCategory.Name</td>
                    <td>@supplyCategory.Description</td>
                    <td>
                        <a class="btn btn-primary text-white" href="/SupplyCategory/Edit/@supplyCategory.Id">Editar</a>
                    </td>
                    <td>
                        <a class="btn btn-danger text-white" @onclick="@(() => DeleteSupplyCategory(supplyCategory.Id))">Deletar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TotalAmountPages="TotalAmountPages" CurrentPage="CurrentPage" Range="3" SelectedPage="SelectedPage">
    </Pagination>
}

<ConfirmationForm @ref="Confirmation" OnCancel="@CancelConfirm" OnConfirmation="@DeleteConfirm">
    <div>Deseja realmente excluir este item ?</div>
</ConfirmationForm>


@code {
    List<SupplyCategory> SupplyCategories { get; set; }
    ConfirmationForm Confirmation;
    int SupplyCategoryId;
    public int TotalAmountPages { get; set; }
    public int CurrentPage { get; set; }
    public int TotalAmountItems { get; set; }

    private async Task SelectedPage(int page)
    {
        CurrentPage = page;
        await LoadSupplyCategories(page);
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadSupplyCategories();
    }

    async Task LoadSupplyCategories(int page = 1, int amountPerPage = 5)
    {
        var httpResponse = await http.GetAsync($"/api/supplyCategory/Get?page={page}&amountPerPage={amountPerPage}");

        if (httpResponse.IsSuccessStatusCode)
        {
            TotalAmountPages = int.Parse(httpResponse.Headers.GetValues("totalPages").FirstOrDefault());
            TotalAmountItems = int.Parse(httpResponse.Headers.GetValues("totalAmount").FirstOrDefault());

            if (TotalAmountItems == 0)
            {
                SupplyCategories = new List<SupplyCategory>();
            } 
            else
            {
                if (TotalAmountPages < CurrentPage)
                {
                    httpResponse = await http.GetAsync($"/api/supplyCategory/Get?page={page - 1}&amountPerPage={amountPerPage}");
                    TotalAmountPages = int.Parse(httpResponse.Headers.GetValues("totalPages").FirstOrDefault());
                }

                var responseString = await httpResponse.Content.ReadAsStringAsync();

                SupplyCategories = JsonSerializer.Deserialize<List<SupplyCategory>>(responseString, new JsonSerializerOptions()
                {
                    PropertyNameCaseInsensitive = true
                });
            }


        }
    }

    void DeleteSupplyCategory(int id)
    {
        Confirmation.Display();
        SupplyCategoryId = id;
    }

    async Task DeleteConfirm()
    {
        await http.DeleteAsync($"/api/SupplyCategory/Delete/{SupplyCategoryId}");
        Confirmation.Hide();
        await SelectedPage(CurrentPage);
    }

    private void CancelConfirm()
    {
        Confirmation.Hide();
        SupplyCategoryId = 0;
    }

}
